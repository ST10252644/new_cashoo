// Generated by view binder compiler. Do not edit!
package com.iie.st10320489.marene.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.iie.st10320489.marene.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRewardsBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final Button ItemClaim;

  @NonNull
  public final TextView discPage;

  @NonNull
  public final NestedScrollView main;

  @NonNull
  public final TextView maxGoalPercentage;

  @NonNull
  public final TextView minGoalPercentage;

  @NonNull
  public final RecyclerView recyclerClmBronze;

  @NonNull
  public final RecyclerView recyclerClmGold;

  @NonNull
  public final RecyclerView recyclerClmSilver;

  @NonNull
  public final TextView textAddGoal;

  @NonNull
  public final TextView tierBron2;

  @NonNull
  public final TextView txtPoints2;

  @NonNull
  public final TextView txtRewards;

  @NonNull
  public final TextView txtYouHave2;

  private FragmentRewardsBinding(@NonNull NestedScrollView rootView, @NonNull Button ItemClaim,
      @NonNull TextView discPage, @NonNull NestedScrollView main,
      @NonNull TextView maxGoalPercentage, @NonNull TextView minGoalPercentage,
      @NonNull RecyclerView recyclerClmBronze, @NonNull RecyclerView recyclerClmGold,
      @NonNull RecyclerView recyclerClmSilver, @NonNull TextView textAddGoal,
      @NonNull TextView tierBron2, @NonNull TextView txtPoints2, @NonNull TextView txtRewards,
      @NonNull TextView txtYouHave2) {
    this.rootView = rootView;
    this.ItemClaim = ItemClaim;
    this.discPage = discPage;
    this.main = main;
    this.maxGoalPercentage = maxGoalPercentage;
    this.minGoalPercentage = minGoalPercentage;
    this.recyclerClmBronze = recyclerClmBronze;
    this.recyclerClmGold = recyclerClmGold;
    this.recyclerClmSilver = recyclerClmSilver;
    this.textAddGoal = textAddGoal;
    this.tierBron2 = tierBron2;
    this.txtPoints2 = txtPoints2;
    this.txtRewards = txtRewards;
    this.txtYouHave2 = txtYouHave2;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRewardsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRewardsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_rewards, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRewardsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ItemClaim;
      Button ItemClaim = ViewBindings.findChildViewById(rootView, id);
      if (ItemClaim == null) {
        break missingId;
      }

      id = R.id.discPage;
      TextView discPage = ViewBindings.findChildViewById(rootView, id);
      if (discPage == null) {
        break missingId;
      }

      NestedScrollView main = (NestedScrollView) rootView;

      id = R.id.maxGoalPercentage;
      TextView maxGoalPercentage = ViewBindings.findChildViewById(rootView, id);
      if (maxGoalPercentage == null) {
        break missingId;
      }

      id = R.id.minGoalPercentage;
      TextView minGoalPercentage = ViewBindings.findChildViewById(rootView, id);
      if (minGoalPercentage == null) {
        break missingId;
      }

      id = R.id.recyclerClmBronze;
      RecyclerView recyclerClmBronze = ViewBindings.findChildViewById(rootView, id);
      if (recyclerClmBronze == null) {
        break missingId;
      }

      id = R.id.recyclerClmGold;
      RecyclerView recyclerClmGold = ViewBindings.findChildViewById(rootView, id);
      if (recyclerClmGold == null) {
        break missingId;
      }

      id = R.id.recyclerClmSilver;
      RecyclerView recyclerClmSilver = ViewBindings.findChildViewById(rootView, id);
      if (recyclerClmSilver == null) {
        break missingId;
      }

      id = R.id.textAddGoal;
      TextView textAddGoal = ViewBindings.findChildViewById(rootView, id);
      if (textAddGoal == null) {
        break missingId;
      }

      id = R.id.tierBron2;
      TextView tierBron2 = ViewBindings.findChildViewById(rootView, id);
      if (tierBron2 == null) {
        break missingId;
      }

      id = R.id.txtPoints2;
      TextView txtPoints2 = ViewBindings.findChildViewById(rootView, id);
      if (txtPoints2 == null) {
        break missingId;
      }

      id = R.id.txtRewards;
      TextView txtRewards = ViewBindings.findChildViewById(rootView, id);
      if (txtRewards == null) {
        break missingId;
      }

      id = R.id.txtYouHave2;
      TextView txtYouHave2 = ViewBindings.findChildViewById(rootView, id);
      if (txtYouHave2 == null) {
        break missingId;
      }

      return new FragmentRewardsBinding((NestedScrollView) rootView, ItemClaim, discPage, main,
          maxGoalPercentage, minGoalPercentage, recyclerClmBronze, recyclerClmGold,
          recyclerClmSilver, textAddGoal, tierBron2, txtPoints2, txtRewards, txtYouHave2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
